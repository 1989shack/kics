name: go-ci-integration

on:
  pull_request:
    branches: [master]

jobs:
  integration-tests:
    name: integration-tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
    - name: Cache Docker layers
      uses: actions/cache@v2.1.4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.ref }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ github.ref }}
    - name: Get short SHA
      run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-8)" >> $GITHUB_ENV
    - name: Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        load: true
        context: ./
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: false
        tags:  kics:${{ github.sha }}
        build-args: |
          VERSION=${GITHUB_SHA_SHORT}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
    - name: Run docker image and generate results.json
      run: |
        docker run -v ${PWD}/assets/queries:/path -e SENTRY_DSN=${{secrets.SENTRY_DSN}} kics:${{ github.sha }} --no-progress -p "/path" -o "/path/results.json"
    - name: Display results
      run: |
        cat  ${PWD}/assets/queries/results.json
    - name: Assert results.json
      run: |
        set -eo pipefail

        COUNT=$(jq '.queries_total' ${PWD}/assets/queries/results.json)
        echo "Assert queries_total > 0 in results.json :: ${COUNT}"
        echo $COUNT | xargs -i{} test {} -gt 0

        COUNT=$(jq '.total_counter' ${PWD}/assets/queries/results.json)
        echo "Assert total_counter > 0 in results.json :: ${COUNT}"
        echo $COUNT | xargs -i{} test {} -gt 0

        COUNT=$(jq '.files_scanned' ${PWD}/assets/queries/results.json)
        echo "Assert files_scanned > 0 in results.json :: ${COUNT}"
        echo $COUNT | xargs -i{} test {} -gt 0

        COUNT=$(jq '.queries_failed_to_execute' ${PWD}/assets/queries/results.json)
        echo "Assert queries_failed_to_execute == 0 in results.json :: ${COUNT}"
        echo $COUNT | xargs -i{} test {} -eq 0

        COUNT=$(jq '.files_failed_to_scan' ${PWD}/assets/queries/results.json)
        echo "Assert files_failed_to_scan == 0 in results.json :: ${COUNT}"
        echo $COUNT | xargs -i{} test {} -eq 0
  integration-tests-windows:
    name: integration-tests-windows
    runs-on: windows-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        persist-credentials: false
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
    - name: Docker info
      run: |
        docker version
        docker info
    - name: Choco install jq
      run: choco install jq -y
    - name: Docker build on Windows
      run: docker build --build-arg "VERSION=${GITHUB_SHA_SHORT}" -f Dockerfile.windows -t checkmarx/kics:nanoserver-${{ github.sha }} .
    - name: Run docker image and generate results.json
      run: docker run -e SENTRY_DSN=${{secrets.SENTRY_DSN}} -v ${PWD}\assets\queries:C:\data checkmarx/kics:nanoserver-${{ github.sha }} --no-progress -p "C:\data" -o "C:\data\results.json"
    - name: Assert results.json
      run: |
        echo "Assert queries_total > 0 in results.json"
        $count=$(jq.exe '.queries_total' ${PWD}\assets\queries\results.json)
        if ($count -gt 0) { echo 'Ok'} else { Write-Error 'Failed' -ErrorAction Stop }

        echo "Assert total_counter > 0 in results.json"
        $count=$(jq.exe '.total_counter' ${PWD}\assets\queries\results.json)
        if ($count -gt 0) { echo 'Ok'} else { Write-Error 'Failed' -ErrorAction Stop }

        echo "Assert files_scanned > 0 in results.json"
        $count=$(jq.exe '.files_scanned' ${PWD}\assets\queries\results.json)
        if ($count -gt 0) { echo 'Ok'} else { Write-Error 'Failed' -ErrorAction Stop }

        echo "Assert queries_failed_to_execute == 0 in results.json"
        $count=$(jq.exe '.queries_failed_to_execute' ${PWD}\assets\queries\results.json)
        if ($count -eq 0) { echo 'Ok'} else { Write-Error 'Failed' -ErrorAction Stop }

        echo "Assert files_failed_to_scan == 0 in results.json"
        $count=$(jq.exe '.files_failed_to_scan' ${PWD}\assets\queries\results.json)
        if ($count -eq 0) { echo 'Ok'} else { Write-Error 'Failed' -ErrorAction Stop }
