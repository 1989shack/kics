package engine

import (
	"encoding/json"
	"reflect"
	"testing"

	"github.com/Checkmarx/kics/internal/tracker"
	"github.com/Checkmarx/kics/pkg/detector"
	"github.com/Checkmarx/kics/pkg/model"
	"github.com/stretchr/testify/require"
)

type vbArgs struct {
	ctx     *QueryContext
	v       interface{}
	tracker Tracker
}

var vbTests = []struct {
	name    string
	args    vbArgs
	want    model.Vulnerability
	wantErr bool
}{
	{
		name: "DefaultVulnerabilityBuilder",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				query: &preparedQuery{
					metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":       "123",
							"severity":  model.SeverityInfo,
							"issueType": "IncorrectValue",
							"searchKey": "testSearchKey",
						},
						Query: "TestQuery",
					},
				},
				files: map[string]model.FileMetadata{
					"testV": {},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityInfo,
			Line:             -1,
			VulnLines:        []model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","searchKey":"testSearchKey","severity":"INFO"}`,
		},
		wantErr: false,
	},
	{
		name: "DefaultVulnerabilityBuilder with override for severity",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				query: &preparedQuery{
					metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
							"overrideKey": "testOverride",
							"override": map[string]interface{}{
								"testOverride": map[string]interface{}{
									"severity": model.SeverityHigh,
								},
							},
						},
						Query: "TestQuery",
					},
				},
				files: map[string]model.FileMetadata{
					"testV": {},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			QueryID:          "Undefined",
			QueryName:        "Anonymous",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityHigh,
			Line:             -1,
			VulnLines:        []model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","override":{"testOverride":{"severity":"HIGH"}},"overrideKey":"testOverride","searchKey":"testSearchKey","severity":"INFO"}`, //nolint
		},
		wantErr: false,
	},
	{
		name: "DefaultVulnerabilityBuilder with override for name",
		args: vbArgs{
			tracker: &tracker.CITracker{},
			ctx: &QueryContext{
				scanID: "ScanID",
				query: &preparedQuery{
					metadata: model.QueryMetadata{
						Metadata: map[string]interface{}{
							"key":         "123",
							"severity":    model.SeverityInfo,
							"issueType":   "IncorrectValue",
							"searchKey":   "testSearchKey",
							"overrideKey": "testOverride",
							"queryName":   "test",
							"override": map[string]interface{}{
								"testOverride": map[string]interface{}{
									"queryName": "testName",
								},
							},
						},
						Query: "TestQuery",
					},
				},
				files: map[string]model.FileMetadata{
					"testV": {},
				},
			},
			v: map[string]interface{}{
				"documentId": "testV",
			},
		},
		want: model.Vulnerability{
			ID:               0,
			SimilarityID:     "2fefa27cc667decf203d10f103b7ffdec232e9af16e361f47d626e72c72b8d63",
			ScanID:           "ScanID",
			FileID:           "",
			FileName:         "",
			DescriptionID:    "Undefined",
			QueryID:          "Undefined",
			QueryName:        "testName",
			QueryURI:         "https://github.com/Checkmarx/kics/",
			Severity:         model.SeverityInfo,
			Line:             -1,
			VulnLines:        []model.CodeLine{},
			IssueType:        "IncorrectValue",
			SearchKey:        "testSearchKey",
			KeyActualValue:   "",
			KeyExpectedValue: "",
			Value:            nil,
			Output:           `{"documentId":"testV","issueType":"IncorrectValue","key":"123","override":{"testOverride":{"queryName":"testName"}},"overrideKey":"testOverride","queryName":"test","searchKey":"testSearchKey","severity":"INFO"}`, //nolint
		},
		wantErr: false,
	},
}

// TestDefaultVulnerabilityBuilder tests the functions [DefaultVulnerabilityBuilder] and all the methods called by them
func TestDefaultVulnerabilityBuilder(t *testing.T) {
	for _, tt := range vbTests {
		insDetector := detector.NewDetectLine(3)
		t.Run(tt.name, func(t *testing.T) {
			got, err := DefaultVulnerabilityBuilder(tt.args.ctx, tt.args.tracker, tt.args.v, insDetector)
			if (err != nil) != tt.wantErr {
				t.Errorf("DefaultVulnerabilityBuilder() error %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				var gotJSON, wantJSON []byte
				gotJSON, err := json.Marshal(got)
				require.NoError(t, err)
				wantJSON, err = json.Marshal(tt.want)
				require.NoError(t, err)
				t.Errorf("DefaultVulnerabilityBuilder() got = %v,\n want = %v", string(gotJSON), string(wantJSON))
			}
		})
	}
}
